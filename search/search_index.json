{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Certainly! Here's a paraphrased version of the entire task while preserving all technical content and meanings , and not altering the equations or conclusions : Problem 1 1-1. Theoretical Derivation The motion of a projectile can be described using Newton's second law. When air resistance is neglected, the kinematic equations govern the system: Horizontal motion: \\[ x(t) = v_0 \\cos(\\theta) \\cdot t \\] (This is uniform motion as there is no horizontal acceleration.) Vertical motion: \\[ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\] (Gravity acts downward, causing vertical acceleration.) To compute the range \\(R\\) , determine the time when the projectile returns to the ground by setting \\(y(t) = 0\\) : \\[ t_f = \\frac{2 v_0 \\sin(\\theta)}{g} \\] Substitute this into the horizontal position equation: \\[ R = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} \\] Using the identity \\(2 \\sin(\\theta) \\cos(\\theta) = \\sin(2\\theta)\\) , the range formula becomes: \\[ R = \\frac{v_0^2}{g} \\sin(2\\theta) \\] 1-2. Theoretical Analysis of the Range Equations of Motion Projectile motion without air resistance can be modeled as: Horizontal displacement: \\[ x(t) = v_0 \\cos(\\theta) \\cdot t \\] Vertical displacement: \\[ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\] Where: \\(v_0\\) is the initial speed, \\(\\theta\\) is the launch angle, \\(g\\) is gravitational acceleration. Time of Flight To find how long the projectile stays airborne, solve \\(y(t) = 0\\) : \\[ t_f = \\frac{2 v_0 \\sin(\\theta)}{g} \\] Range Equation Insert \\(t_f\\) into the horizontal equation: \\[ R = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} \\] Applying the identity again gives: \\[ R = \\frac{v_0^2}{g} \\sin(2\\theta) \\] Analysis & Observations The maximum range is achieved at a 45\u00b0 launch angle. The range is symmetric around 45\u00b0, meaning 30\u00b0 and 60\u00b0 yield the same result. Increasing \\(v_0\\) leads to a larger range. Higher \\(g\\) values reduce the range. Limitation: Air resistance is not accounted for, which would reduce the ideal launch angle slightly below 45\u00b0 in real situations. 1-3. Key Equations of Projectile Motion 1. Equations of Motion When a projectile is launched with an initial velocity \\(v_0\\) at angle \\(\\theta\\) : Horizontal: \\[ x(t) = v_0 \\cos(\\theta) \\cdot t \\] Vertical: \\[ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\] 2. Flight Time Find when the projectile hits the ground by setting \\(y = 0\\) : \\[ t_\\text{flight} = \\frac{2 v_0 \\sin(\\theta)}{g} \\] 3. Maximum Height Occurs when vertical velocity becomes zero: \\[ h_\\text{max} = \\frac{(v_0 \\sin(\\theta))^2}{2g} \\] 4. Range Horizontal distance covered: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] 1-4. Project Summary: Simulation & Analysis of Projectile Motion Motivation: Projectile motion is a foundational topic in physics, illustrating the effects of angle and velocity on a body\u2019s trajectory. While simple, it reveals principles relevant to many fields, such as ballistics or sports. Objective: Create a computational model that simulates projectile motion and visualizes how the range varies with launch angle, taking into account variables like velocity, gravity, and height. Implementation Strategy: Mathematical Framework: Horizontal motion: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Vertical motion: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Where: \\(v_0\\) = initial speed \\(\\theta\\) = launch angle \\(g\\) = gravitational acceleration Computational Model: Use Python , leveraging NumPy for numerical calculations and Matplotlib for plotting. Simulation Tasks: Calculate the range for varying launch angles. Plot range vs. angle graphs under different initial speeds and conditions. Adjust gravity and initial height to observe their effects. Visual Outputs: Range vs. angle plots for multiple velocities. Visualization of optimal launch angles depending on speed. Evaluation: Analyze how different parameters affect motion and range. Determine the angle that maximizes range in various scenarios. Model Assumptions: This simulation assumes: No air resistance Constant gravitational field Flat ground level Future Considerations: Examine how resistance, wind, and launch height alter trajectories. Suggest improvements for modeling more realistic conditions. Let me know if you need this translated into another language or turned into a report/document format.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-1-theoretical-derivation","text":"The motion of a projectile can be described using Newton's second law. When air resistance is neglected, the kinematic equations govern the system: Horizontal motion: \\[ x(t) = v_0 \\cos(\\theta) \\cdot t \\] (This is uniform motion as there is no horizontal acceleration.) Vertical motion: \\[ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\] (Gravity acts downward, causing vertical acceleration.) To compute the range \\(R\\) , determine the time when the projectile returns to the ground by setting \\(y(t) = 0\\) : \\[ t_f = \\frac{2 v_0 \\sin(\\theta)}{g} \\] Substitute this into the horizontal position equation: \\[ R = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} \\] Using the identity \\(2 \\sin(\\theta) \\cos(\\theta) = \\sin(2\\theta)\\) , the range formula becomes: \\[ R = \\frac{v_0^2}{g} \\sin(2\\theta) \\]","title":"1-1. Theoretical Derivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-2-theoretical-analysis-of-the-range","text":"Equations of Motion Projectile motion without air resistance can be modeled as: Horizontal displacement: \\[ x(t) = v_0 \\cos(\\theta) \\cdot t \\] Vertical displacement: \\[ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\] Where: \\(v_0\\) is the initial speed, \\(\\theta\\) is the launch angle, \\(g\\) is gravitational acceleration. Time of Flight To find how long the projectile stays airborne, solve \\(y(t) = 0\\) : \\[ t_f = \\frac{2 v_0 \\sin(\\theta)}{g} \\] Range Equation Insert \\(t_f\\) into the horizontal equation: \\[ R = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} \\] Applying the identity again gives: \\[ R = \\frac{v_0^2}{g} \\sin(2\\theta) \\] Analysis & Observations The maximum range is achieved at a 45\u00b0 launch angle. The range is symmetric around 45\u00b0, meaning 30\u00b0 and 60\u00b0 yield the same result. Increasing \\(v_0\\) leads to a larger range. Higher \\(g\\) values reduce the range. Limitation: Air resistance is not accounted for, which would reduce the ideal launch angle slightly below 45\u00b0 in real situations.","title":"1-2. Theoretical Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-3-key-equations-of-projectile-motion","text":"1. Equations of Motion When a projectile is launched with an initial velocity \\(v_0\\) at angle \\(\\theta\\) : Horizontal: \\[ x(t) = v_0 \\cos(\\theta) \\cdot t \\] Vertical: \\[ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\] 2. Flight Time Find when the projectile hits the ground by setting \\(y = 0\\) : \\[ t_\\text{flight} = \\frac{2 v_0 \\sin(\\theta)}{g} \\] 3. Maximum Height Occurs when vertical velocity becomes zero: \\[ h_\\text{max} = \\frac{(v_0 \\sin(\\theta))^2}{2g} \\] 4. Range Horizontal distance covered: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\]","title":"1-3. Key Equations of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-4-project-summary-simulation-analysis-of-projectile-motion","text":"Motivation: Projectile motion is a foundational topic in physics, illustrating the effects of angle and velocity on a body\u2019s trajectory. While simple, it reveals principles relevant to many fields, such as ballistics or sports. Objective: Create a computational model that simulates projectile motion and visualizes how the range varies with launch angle, taking into account variables like velocity, gravity, and height. Implementation Strategy: Mathematical Framework: Horizontal motion: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Vertical motion: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Where: \\(v_0\\) = initial speed \\(\\theta\\) = launch angle \\(g\\) = gravitational acceleration Computational Model: Use Python , leveraging NumPy for numerical calculations and Matplotlib for plotting. Simulation Tasks: Calculate the range for varying launch angles. Plot range vs. angle graphs under different initial speeds and conditions. Adjust gravity and initial height to observe their effects. Visual Outputs: Range vs. angle plots for multiple velocities. Visualization of optimal launch angles depending on speed. Evaluation: Analyze how different parameters affect motion and range. Determine the angle that maximizes range in various scenarios. Model Assumptions: This simulation assumes: No air resistance Constant gravitational field Flat ground level Future Considerations: Examine how resistance, wind, and launch height alter trajectories. Suggest improvements for modeling more realistic conditions. Let me know if you need this translated into another language or turned into a report/document format.","title":"1-4. Project Summary: Simulation &amp; Analysis of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Certainly! Here's the professionally rewritten and organized version of your Forced Damped Pendulum project in English: \ud83c\udf93 2-1-1 Theoretical Foundation \ud83e\udde0 Governing Differential Equation The forced damped pendulum is described by the following nonlinear second-order differential equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Where: \u03b8(t): Angular displacement \u03b3: Damping coefficient \u03c9\u2080 = \u221a(g/L): Natural angular frequency A: Amplitude of the external driving force \u03c9: Frequency of the external driving force --- f s \ud83d\udd0d Small-Angle Approximation For small angles (\u03b8 < 0.2 rad): \\[ \\sin(\\theta) \\approx \\theta \\] This simplifies the equation to a linear form: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] \u2705 Analytical Solution The general solution of this second-order linear non-homogeneous ODE is: \\[ \\theta(t) = \\theta_{\\text{hom}}(t) + \\theta_{\\text{part}}(t) \\] \ud83d\udcd8 Homogeneous (Transient) Solution: \\[ \\theta_{\\text{hom}}(t) = C_1 e^{-\\gamma t/2} \\cos(\\omega_d t) + C_2 e^{-\\gamma t/2} \\sin(\\omega_d t) \\] Where: \\[ \\omega_d = \\sqrt{\\omega_0^2 - \\left(\\frac{\\gamma}{2}\\right)^2} \\] \ud83d\udcd8 Particular (Steady-State) Solution: \\[ \\theta_{\\text{part}}(t) = B \\cos(\\omega t - \\phi) \\] With: \\[ B = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2}}, \\quad \\tan(\\phi) = \\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2} \\] \ud83c\udfaf Resonance Condition Resonance occurs when the amplitude is maximized, i.e., when the denominator of \\(B\\) is minimized: \\[ \\omega_{\\text{res}} = \\sqrt{\\omega_0^2 - 2\\gamma^2} \\] \ud83d\udcca 2-1-2 Dynamics Analysis Summary The system\u2019s behavior depends on three key parameters: Damping (\u03b3): Low damping \u2192 Sustained oscillations and sharp resonance High damping \u2192 Suppressed motion and reduced resonance Driving Amplitude (A): Small A \u2192 Regular periodic motion Large A \u2192 Complex or chaotic behavior Driving Frequency (\u03c9): Near \u03c9\u2080 \u2192 Resonance and large amplitude Far from \u03c9\u2080 \u2192 Periodic, quasiperiodic, or chaotic behavior As parameters vary, the system may transition from simple harmonic motion to chaos, often via period doubling . These behaviors are best visualized using time series , phase portraits , and Poincar\u00e9 sections . \ud83c\udf0d 2-1-3 Real-World Applications Energy Harvesting Devices: Pendulum models help design systems that harvest mechanical vibrations efficiently under periodic driving. Suspension Bridges: Forced oscillations under wind or traffic loads must be analyzed to prevent resonance-induced failures. RLC Circuits: Analogous behavior in electrical circuits makes this model useful for analyzing damping and resonance in electronics. Biomechanics (Human Gait): Useful for understanding walking dynamics and designing prosthetics or studying movement disorders. \ud83d\udee0\ufe0f 2-1-4 Simulation and Visualization \ud83c\udfaf Objective This section focuses on advanced simulation of the forced damped pendulum, including: Bifurcation Diagrams to track how system behavior changes with varying parameters Poincar\u00e9 Sections to reveal the underlying structure of chaotic motion Phase Portraits to visualize trajectories in phase space \ud83d\udd2c Tools \ud83d\udcc8 Bifurcation Diagram: Visualizes how long-term system behavior evolves as a parameter (typically A) is varied. It reveals the route to chaos via period doubling. \ud83d\udd01 Poincar\u00e9 Section: Samples the system state at regular intervals (e.g., each period of driving force). Helps identify periodic , quasiperiodic , or chaotic regimes. \ud83c\udf0c Phase Portrait: Plots angular velocity \\(\\dot{\\theta}\\) versus angular displacement \u03b8 to observe system evolution: Limit cycles \u2192 regular oscillation Strange attractors \u2192 chaotic motion","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-1-1-theoretical-foundation","text":"","title":"\ud83c\udf93 2-1-1 Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-differential-equation","text":"The forced damped pendulum is described by the following nonlinear second-order differential equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Where: \u03b8(t): Angular displacement \u03b3: Damping coefficient \u03c9\u2080 = \u221a(g/L): Natural angular frequency A: Amplitude of the external driving force \u03c9: Frequency of the external driving force --- f s","title":"\ud83e\udde0 Governing Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small angles (\u03b8 < 0.2 rad): \\[ \\sin(\\theta) \\approx \\theta \\] This simplifies the equation to a linear form: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\]","title":"\ud83d\udd0d Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#analytical-solution","text":"The general solution of this second-order linear non-homogeneous ODE is: \\[ \\theta(t) = \\theta_{\\text{hom}}(t) + \\theta_{\\text{part}}(t) \\]","title":"\u2705 Analytical Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#homogeneous-transient-solution","text":"\\[ \\theta_{\\text{hom}}(t) = C_1 e^{-\\gamma t/2} \\cos(\\omega_d t) + C_2 e^{-\\gamma t/2} \\sin(\\omega_d t) \\] Where: \\[ \\omega_d = \\sqrt{\\omega_0^2 - \\left(\\frac{\\gamma}{2}\\right)^2} \\]","title":"\ud83d\udcd8 Homogeneous (Transient) Solution:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#particular-steady-state-solution","text":"\\[ \\theta_{\\text{part}}(t) = B \\cos(\\omega t - \\phi) \\] With: \\[ B = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2}}, \\quad \\tan(\\phi) = \\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2} \\]","title":"\ud83d\udcd8 Particular (Steady-State) Solution:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-condition","text":"Resonance occurs when the amplitude is maximized, i.e., when the denominator of \\(B\\) is minimized: \\[ \\omega_{\\text{res}} = \\sqrt{\\omega_0^2 - 2\\gamma^2} \\]","title":"\ud83c\udfaf Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-1-2-dynamics-analysis-summary","text":"The system\u2019s behavior depends on three key parameters: Damping (\u03b3): Low damping \u2192 Sustained oscillations and sharp resonance High damping \u2192 Suppressed motion and reduced resonance Driving Amplitude (A): Small A \u2192 Regular periodic motion Large A \u2192 Complex or chaotic behavior Driving Frequency (\u03c9): Near \u03c9\u2080 \u2192 Resonance and large amplitude Far from \u03c9\u2080 \u2192 Periodic, quasiperiodic, or chaotic behavior As parameters vary, the system may transition from simple harmonic motion to chaos, often via period doubling . These behaviors are best visualized using time series , phase portraits , and Poincar\u00e9 sections .","title":"\ud83d\udcca 2-1-2 Dynamics Analysis Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-1-3-real-world-applications","text":"Energy Harvesting Devices: Pendulum models help design systems that harvest mechanical vibrations efficiently under periodic driving. Suspension Bridges: Forced oscillations under wind or traffic loads must be analyzed to prevent resonance-induced failures. RLC Circuits: Analogous behavior in electrical circuits makes this model useful for analyzing damping and resonance in electronics. Biomechanics (Human Gait): Useful for understanding walking dynamics and designing prosthetics or studying movement disorders.","title":"\ud83c\udf0d 2-1-3 Real-World Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-1-4-simulation-and-visualization","text":"","title":"\ud83d\udee0\ufe0f 2-1-4 Simulation and Visualization"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#objective","text":"This section focuses on advanced simulation of the forced damped pendulum, including: Bifurcation Diagrams to track how system behavior changes with varying parameters Poincar\u00e9 Sections to reveal the underlying structure of chaotic motion Phase Portraits to visualize trajectories in phase space","title":"\ud83c\udfaf Objective"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#tools","text":"","title":"\ud83d\udd2c Tools"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#bifurcation-diagram","text":"Visualizes how long-term system behavior evolves as a parameter (typically A) is varied. It reveals the route to chaos via period doubling.","title":"\ud83d\udcc8 Bifurcation Diagram:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#poincare-section","text":"Samples the system state at regular intervals (e.g., each period of driving force). Helps identify periodic , quasiperiodic , or chaotic regimes.","title":"\ud83d\udd01 Poincar\u00e9 Section:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#phase-portrait","text":"Plots angular velocity \\(\\dot{\\theta}\\) versus angular displacement \u03b8 to observe system evolution: Limit cycles \u2192 regular oscillation Strange attractors \u2192 chaotic motion","title":"\ud83c\udf0c Phase Portrait:"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"\ud83d\udcd8 Problem 1: Orbital Period and Orbital Radius \ud83d\udd22 Task 1: Derive the relationship between orbital period and radius \ud83d\udd2c Theoretical Background From Newton\u2019s Law of Gravitation and centripetal force for circular orbits: \\[ F_g = \\frac{G M m}{r^2}, \\quad F_c = \\frac{m v^2}{r} \\] Equating both: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\Rightarrow v^2 = \\frac{G M}{r} \\] Orbital period \\(T\\) is related to velocity: \\[ T = \\frac{2\\pi r}{v} \\Rightarrow T^2 = \\frac{4\\pi^2 r^2}{v^2} \\] Substitute \\(v^2\\) : \\[ T^2 = \\frac{4\\pi^2 r^3}{G M} \\Rightarrow \\boxed{T^2 \\propto r^3} \\] \ud83d\udcbb Python Code \u2013 Kepler\u2019s Law Formula Simulation import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # mass of Earth (kg) # Define orbital radius range (m) radii = np.linspace(7e6, 4.2e7, 100) # Calculate orbital period using the derived formula T = 2 * np.pi * np.sqrt(radii**3 / (G * M)) # Plot period vs radius^1.5 to show linearity plt.figure(figsize=(7,5)) plt.plot(radii**1.5, T, color='blue') plt.xlabel(\"$r^{1.5}$ [m$^{1.5}$]\") plt.ylabel(\"Orbital Period $T$ [s]\") plt.title(\"Verification of $T \\\\propto r^{1.5}$ (Kepler\u2019s 3rd Law)\") plt.grid(True) plt.tight_layout() plt.show() \ud83d\udef0\ufe0f Task 2: Implications for Astronomy \ud83c\udf0c Explanation Kepler's Third Law is fundamental for understanding how celestial bodies move and interact. It allows astronomers to: \ud83e\ude90 Determine masses of planets and stars by observing satellite orbits. \ud83c\udf0d Estimate distances in solar and extrasolar systems. \ud83d\udef0\ufe0f Design satellite orbits (e.g. GPS, geostationary satellites). \ud83d\udd2d Detect exoplanets by measuring how a star wobbles due to an unseen companion. \ud83d\udcbb Python Code \u2013 Mass Estimation from Orbital Data Example: Estimate Earth's mass from Moon\u2019s orbit. # Moon data T_moon = 27.3 * 24 * 3600 # seconds r_moon = 3.84e8 # meters # Rearranged formula: M = 4\u03c0\u00b2r\u00b3 / (GT\u00b2) M_earth_est = 4 * np.pi**2 * r_moon**3 / (G * T_moon**2) print(f\"Estimated Earth mass: {M_earth_est:.2e} kg\") \ud83c\udf0d Task 3: Analyze Real-World Examples \ud83d\udccc Examples Moon orbiting Earth \\(r = 3.84 \\times 10^8 \\, \\text{m}, \\; T = 27.3 \\, \\text{days}\\) From this, Earth's mass can be estimated accurately. Earth orbiting Sun \\(r = 1.496 \\times 10^{11} \\, \\text{m}, \\; T = 365.25 \\, \\text{days}\\) Useful for measuring astronomical units (AU). Mars vs Jupiter Jupiter\u2019s orbital period is \u224811.9 years, and its distance is much greater \u2014 validating \\(T^2 \\propto r^3\\) . \ud83d\udcbb Python Code \u2013 Compare Planets (Simplified) # Orbital data for planets (AU and years) r_AU = np.array([0.39, 0.72, 1.0, 1.52, 5.2, 9.58]) # Mercury to Saturn T_years = np.array([0.24, 0.61, 1.0, 1.88, 11.86, 29.45]) # Convert to SI r_m = r_AU * 1.496e11 T_s = T_years * 365.25 * 24 * 3600 # Check T\u00b2 vs r\u00b3 plt.figure(figsize=(7,5)) plt.plot(r_m**3, T_s**2, 'o-', color='green') plt.xlabel(\"$r^3$ [m\u00b3]\") plt.ylabel(\"$T^2$ [s\u00b2]\") plt.title(\"Solar System: $T^2$ vs $r^3$\") plt.grid(True) plt.tight_layout() plt.show() \ud83d\udcbb Task 4: Implement Simulation & Extend to Elliptical Orbits \ud83e\uddea Simulation of Circular Orbits Already shown above \u2014 the code verifies \\(T^2 \\propto r^3\\) with circular orbits around Earth and Sun. \ud83d\udfe3 Elliptical Orbits: Generalization For elliptical orbits , Kepler\u2019s Law still applies: \\[ T^2 \\propto a^3 \\] Where \\(a\\) is the semi-major axis . This generalization allows the same method to work for: Planets with eccentric orbits (e.g. Pluto) Comets like Halley\u2019s comet Binary star systems \ud83d\udcbb Optional Code \u2013 Elliptical Orbit Plot (2D) # Sample elliptical orbit a = 1.5e11 # semi-major axis e = 0.6 # eccentricity theta = np.linspace(0, 2*np.pi, 1000) r = (a * (1 - e**2)) / (1 + e * np.cos(theta)) # Convert to Cartesian x = r * np.cos(theta) y = r * np.sin(theta) plt.figure(figsize=(6,6)) plt.plot(x, y, label=f\"e={e}\") plt.plot([0], [0], 'yo', label=\"Focus (Sun)\") plt.title(\"Elliptical Orbit\") plt.xlabel(\"x [m]\") plt.ylabel(\"y [m]\") plt.axis('equal') plt.grid(True) plt.legend() plt.tight_layout() plt.show() \u2705 Summary Task Covered 1. Derivation of Kepler\u2019s Law \u2714\ufe0f 2. Implications in Astronomy \u2714\ufe0f 3. Real-World Examples \u2714\ufe0f 4. Computational Model + Elliptical Case \u2714\ufe0f Let me know if you want this in .ipynb (Jupyter notebook), .py , or .md format for submission. Ready for the next problem if you are!","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1-orbital-period-and-orbital-radius","text":"","title":"\ud83d\udcd8 Problem 1: Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#task-1-derive-the-relationship-between-orbital-period-and-radius","text":"","title":"\ud83d\udd22 Task 1: Derive the relationship between orbital period and radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#theoretical-background","text":"From Newton\u2019s Law of Gravitation and centripetal force for circular orbits: \\[ F_g = \\frac{G M m}{r^2}, \\quad F_c = \\frac{m v^2}{r} \\] Equating both: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\Rightarrow v^2 = \\frac{G M}{r} \\] Orbital period \\(T\\) is related to velocity: \\[ T = \\frac{2\\pi r}{v} \\Rightarrow T^2 = \\frac{4\\pi^2 r^2}{v^2} \\] Substitute \\(v^2\\) : \\[ T^2 = \\frac{4\\pi^2 r^3}{G M} \\Rightarrow \\boxed{T^2 \\propto r^3} \\]","title":"\ud83d\udd2c Theoretical Background"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-code-keplers-law-formula-simulation","text":"import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # mass of Earth (kg) # Define orbital radius range (m) radii = np.linspace(7e6, 4.2e7, 100) # Calculate orbital period using the derived formula T = 2 * np.pi * np.sqrt(radii**3 / (G * M)) # Plot period vs radius^1.5 to show linearity plt.figure(figsize=(7,5)) plt.plot(radii**1.5, T, color='blue') plt.xlabel(\"$r^{1.5}$ [m$^{1.5}$]\") plt.ylabel(\"Orbital Period $T$ [s]\") plt.title(\"Verification of $T \\\\propto r^{1.5}$ (Kepler\u2019s 3rd Law)\") plt.grid(True) plt.tight_layout() plt.show()","title":"\ud83d\udcbb Python Code \u2013 Kepler\u2019s Law Formula Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#task-2-implications-for-astronomy","text":"","title":"\ud83d\udef0\ufe0f Task 2: Implications for Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#explanation","text":"Kepler's Third Law is fundamental for understanding how celestial bodies move and interact. It allows astronomers to: \ud83e\ude90 Determine masses of planets and stars by observing satellite orbits. \ud83c\udf0d Estimate distances in solar and extrasolar systems. \ud83d\udef0\ufe0f Design satellite orbits (e.g. GPS, geostationary satellites). \ud83d\udd2d Detect exoplanets by measuring how a star wobbles due to an unseen companion.","title":"\ud83c\udf0c Explanation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-code-mass-estimation-from-orbital-data","text":"Example: Estimate Earth's mass from Moon\u2019s orbit. # Moon data T_moon = 27.3 * 24 * 3600 # seconds r_moon = 3.84e8 # meters # Rearranged formula: M = 4\u03c0\u00b2r\u00b3 / (GT\u00b2) M_earth_est = 4 * np.pi**2 * r_moon**3 / (G * T_moon**2) print(f\"Estimated Earth mass: {M_earth_est:.2e} kg\")","title":"\ud83d\udcbb Python Code \u2013 Mass Estimation from Orbital Data"},{"location":"1%20Physics/2%20Gravity/Problem_1/#task-3-analyze-real-world-examples","text":"","title":"\ud83c\udf0d Task 3: Analyze Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#examples","text":"Moon orbiting Earth \\(r = 3.84 \\times 10^8 \\, \\text{m}, \\; T = 27.3 \\, \\text{days}\\) From this, Earth's mass can be estimated accurately. Earth orbiting Sun \\(r = 1.496 \\times 10^{11} \\, \\text{m}, \\; T = 365.25 \\, \\text{days}\\) Useful for measuring astronomical units (AU). Mars vs Jupiter Jupiter\u2019s orbital period is \u224811.9 years, and its distance is much greater \u2014 validating \\(T^2 \\propto r^3\\) .","title":"\ud83d\udccc Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-code-compare-planets-simplified","text":"# Orbital data for planets (AU and years) r_AU = np.array([0.39, 0.72, 1.0, 1.52, 5.2, 9.58]) # Mercury to Saturn T_years = np.array([0.24, 0.61, 1.0, 1.88, 11.86, 29.45]) # Convert to SI r_m = r_AU * 1.496e11 T_s = T_years * 365.25 * 24 * 3600 # Check T\u00b2 vs r\u00b3 plt.figure(figsize=(7,5)) plt.plot(r_m**3, T_s**2, 'o-', color='green') plt.xlabel(\"$r^3$ [m\u00b3]\") plt.ylabel(\"$T^2$ [s\u00b2]\") plt.title(\"Solar System: $T^2$ vs $r^3$\") plt.grid(True) plt.tight_layout() plt.show()","title":"\ud83d\udcbb Python Code \u2013 Compare Planets (Simplified)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#task-4-implement-simulation-extend-to-elliptical-orbits","text":"","title":"\ud83d\udcbb Task 4: Implement Simulation &amp; Extend to Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#simulation-of-circular-orbits","text":"Already shown above \u2014 the code verifies \\(T^2 \\propto r^3\\) with circular orbits around Earth and Sun.","title":"\ud83e\uddea Simulation of Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#elliptical-orbits-generalization","text":"For elliptical orbits , Kepler\u2019s Law still applies: \\[ T^2 \\propto a^3 \\] Where \\(a\\) is the semi-major axis . This generalization allows the same method to work for: Planets with eccentric orbits (e.g. Pluto) Comets like Halley\u2019s comet Binary star systems","title":"\ud83d\udfe3 Elliptical Orbits: Generalization"},{"location":"1%20Physics/2%20Gravity/Problem_1/#optional-code-elliptical-orbit-plot-2d","text":"# Sample elliptical orbit a = 1.5e11 # semi-major axis e = 0.6 # eccentricity theta = np.linspace(0, 2*np.pi, 1000) r = (a * (1 - e**2)) / (1 + e * np.cos(theta)) # Convert to Cartesian x = r * np.cos(theta) y = r * np.sin(theta) plt.figure(figsize=(6,6)) plt.plot(x, y, label=f\"e={e}\") plt.plot([0], [0], 'yo', label=\"Focus (Sun)\") plt.title(\"Elliptical Orbit\") plt.xlabel(\"x [m]\") plt.ylabel(\"y [m]\") plt.axis('equal') plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"\ud83d\udcbb Optional Code \u2013 Elliptical Orbit Plot (2D)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#summary","text":"Task Covered 1. Derivation of Kepler\u2019s Law \u2714\ufe0f 2. Implications in Astronomy \u2714\ufe0f 3. Real-World Examples \u2714\ufe0f 4. Computational Model + Elliptical Case \u2714\ufe0f Let me know if you want this in .ipynb (Jupyter notebook), .py , or .md format for submission. Ready for the next problem if you are!","title":"\u2705 Summary"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory sdsdsd","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"sdsdsd","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}